// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEW ENUM to define payment statuses
enum PaymentStatus {
  PENDING
  PAID
}

enum Role {
  Admin
  Franchise
  Distributor
  SubDistributor
  Dealer
  Farmer
}

model User {
  id                   String        @id @default(cuid())
  userId               String        @unique
  name                 String
  password             String
  role                 Role
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  uplineId             String?
  upline               User?         @relation("Hierarchy", fields: [uplineId], references: [id])
  downline             User[]        @relation("Hierarchy")
  mobile               String?
  email                String?
  pan                  String?
  aadhar               String?
  address              String?
  pincode              String?
  crops                String[]      @default([])
  payouts              Payout[]
  inventory            UserInventory[]
  transactionsAsSeller Transaction[] @relation("SellerTransactions")
  transactionsAsBuyer  Transaction[] @relation("BuyerTransactions")
}

model Product {
  id                  String          @id @default(cuid())
  name                String
  franchisePrice      Float
  distributorPrice    Float
  subDistributorPrice Float
  dealerPrice         Float
  farmerPrice         Float
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  isActive            Boolean         @default(true)
  inventoryItems      UserInventory[]
  transactions        Transaction[]
}

model UserInventory {
  id        String  @id @default(cuid())
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([userId, productId])
}

model Transaction {
  id            String      @id @default(cuid())
  quantity      Int
  purchasePrice Float
  totalAmount   Float
  profit        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt // <-- ADD THIS LINE

  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  seller        User        @relation("SellerTransactions", fields: [sellerId], references: [id])
  sellerId      String
  buyer         User        @relation("BuyerTransactions", fields: [buyerId], references: [id])
  buyerId       String
  paymentStatus PaymentStatus @default(PENDING)
}

model Payout {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}