// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PAID
}

// <-- ADDED NEW ENUM -->
enum CommissionStatus {
  PENDING
  PAID
}

enum Role {
  Admin
  Franchise
  Distributor
  SubDistributor
  Dealer
  Farmer
}

model User {
  id                   String        @id @default(cuid())
  userId               String        @unique
  name                 String
  password             String
  role                 Role
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  uplineId             String?
  upline               User?         @relation("Hierarchy", fields: [uplineId], references: [id])
  downline             User[]        @relation("Hierarchy")
  mobile               String?
  email                String?
  pan                  String?
  aadhar               String?
  address              String?
  pincode              String?
  crops                String[]      @default([])
  isMember             Boolean       @default(false)
  payouts              Payout[]
  inventory            UserInventory[]
  transactionsAsSeller Transaction[] @relation("SellerTransactions")
  transactionsAsBuyer  Transaction[] @relation("BuyerTransactions")
  commissions          Commission[] // <-- ADDED RELATION
}

model Product {
  id                  String          @id @default(cuid())
  name                String
  franchisePrice      Float
  distributorPrice    Float
  subDistributorPrice Float
  dealerPrice         Float
  farmerPrice         Float
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  isActive            Boolean         @default(true)
  inventoryItems      UserInventory[]
  transactions        Transaction[]
}

model UserInventory {
  id        String  @id @default(cuid())
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([userId, productId])
}

model Transaction {
  id              String       @id @default(cuid())
  quantity        Int
  purchasePrice   Float
  totalAmount     Float
  profit          Float // This 'profit' is for the direct seller (e.g., Dealer selling to Farmer)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  paymentStatus   PaymentStatus @default(PENDING)
  paymentProofUrl String?
  product         Product      @relation(fields: [productId], references: [id])
  productId       String
  seller          User         @relation("SellerTransactions", fields: [sellerId], references: [id])
  sellerId        String
  buyer           User         @relation("BuyerTransactions", fields: [buyerId], references: [id])
  buyerId         String
  commissions     Commission[] // <-- ADDED RELATION
}

model Payout {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// <-- ADDED NEW MODEL -->
model Commission {
  id            String           @id @default(cuid())
  amount        Float
  status        CommissionStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  payoutNotes   String?          // Optional notes for the admin

  user          User             @relation(fields: [userId], references: [id])
  userId        String           // The user who EARNED this commission
  
  transaction   Transaction      @relation(fields: [transactionId], references: [id])
  transactionId String           // The sale that generated this commission

  @@index([userId])
  @@index([transactionId])
}